{"version":3,"sources":["components/Header.js","components/TodoItem/TodoItem.js","components/InputTodo.js","components/TodoContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","style","textAlign","margin","color","marginBottom","TodoItem","props","type","checked","completed","onChange","handleChange","id","title","onClick","deleteTodoHandler","InputTodo","state","correctLength","onChangeHandler","e","setState","target","value","onSubmitHandler","preventDefault","length","addTodoItem","action","onSubmit","this","placeholder","Component","TodoContainer","todos","onChangeCheckbox","axios","put","updatedTodosArr","map","todo","_id","console","log","delete","filter","post","newTodo","uuidv4","unshift","get","then","response","data","key","React","App","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e694e4c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n\n    const h1Style = {\n        textAlign: \"center\",\n        margin: \"30px\",\n        color: \"gray\"\n    };\n    return (\n        <header className=\"active\">\n            <h1 style={ h1Style }>The Amazing To Do App</h1>\n            <p style={ {marginBottom:\"15px\"} }>Add, Edit or Delete a Todo Item.</p>\n        </header>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport './TodoItem.scss';\n\nconst TodoItem = (props) => {\n\n\n    return (\n        <li className=\"todo-item\">\n            <input \n                type=\"checkbox\" \n                checked={props.completed} \n                onChange={() => props.handleChange(props.id)}>\n            </input>\n            {/* <span style={ props.completed ? completedStyle : null }>{props.title}</span> */}\n\n            {/* Alternative zu inline style: css klasse verwenden */}\n            <span className={ props.completed ? \"completed-item\" : null } >{props.title}</span>\n            \n            <button \n                onClick={ () => { props.deleteTodoHandler(props.id) } }\n            >\n                Delete\n            </button>\n        </li>\n    )\n}\n\nexport default TodoItem;","import React, { Component } from 'react';\n\nclass InputTodo extends Component {\n\n    state = {\n        title: \"\",\n        correctLength: true\n    };\n\n    onChangeHandler = (e) => {\n        // console.log('Input changed', e.target);\n        this.setState({\n           title: e.target.value\n        })\n    }\n\n    onSubmitHandler = (e) => {\n        e.preventDefault();\n        // console.log(this.state.title);\n\n        // correct length\n        if(this.state.title.length >3 && this.state.title.length < 25 ) {\n\n            this.props.addTodoItem(this.state.title);\n\n            // clear title and therefore text input\n            this.setState({\n                title: \"\",\n                correctLength: true\n            });\n            \n        } else { // incorrect length\n            this.setState({\n                correctLength: false\n            });\n        }\n    }\n\n\n    render() {\n\n        return (\n            <form action=\"\" onSubmit={this.onSubmitHandler} className=\"form\">\n                <input\n                    className=\"input-text\"\n                    type=\"text\" \n                    placeholder=\"ToDo...\" \n                    value={this.state.title}\n                    onChange={ this.onChangeHandler }\n                />\n                <input type=\"submit\" value=\"hinzufügen\" className=\"input-submit\" />\n                {this.state.correctLength ? \n                    null : \n                    <p>Dein ToDo muss zwischen 3 und 25 Zeichen lang sein!</p>\n                }\n            </form>\n        );\n    }\n}\n\nexport default InputTodo;","import React from 'react';\nimport Header from \"./Header\";\nimport TodoItem from \"./TodoItem/TodoItem\";\nimport InputTodo from \"./InputTodo\";\nimport { v4 as uuidv4 } from 'uuid';\nimport axios from \"axios\";\n\n\n\n// class component\nclass TodoContainer extends React.Component {\n\n    state = {\n        todos: []\n    }\n\n    componentDidMount() {\n        console.log('Komponente ist fertig (componentDidMount)');\n        axios.get('https://meladtodo.herokuapp.com/todos')\n            .then(\n                response => {this.setState({ todos : response.data} ) } \n            );\n        \n        // Aufgabe\n        // füge die Todo von jsonplaceholder deinem state und somit deiner ToDo-Listhinzu\n    }\n\n    componentDidUpdate() {\n        console.log('component did update!')\n    }\n\n    onChangeCheckbox = (id) => {\n\n        axios.put(`https://meladtodo.herokuapp.com/todos/${id}`)\n        const updatedTodosArr = this.state.todos.map(todo => {\n            if(todo._id === id) {\n                todo.completed = !todo.completed;\n            }\n            return todo;\n        })\n\n        // console.log(updatedTodosArr);\n\n        this.setState( {\n            todos: updatedTodosArr\n        } );\n    }\n\n    deleteTodoHandler = (id) => {\n        console.log('delete item:', id);\n        axios.delete(`https://meladtodo.herokuapp.com/todos/${id}`)\n\n        const updatedTodosArr = this.state.todos.filter( todo => todo._id !== id );\n        console.log(updatedTodosArr); // Ziel: Array ohne das gelöschte Element\n\n        //update state\n\n        this.setState({\n            todos: updatedTodosArr\n        })\n    }\n\n    addTodoItem = (title) => {\n        console.log('add:', title)\n        axios.post(`https://meladtodo.herokuapp.com/todos`, { title })\n        // füge neues toDo Item dem state hinzu\n        // drei Werte: id, title, completed\n        const newTodo = {\n            id: uuidv4(),\n            title: title,\n            completed: false\n        }\n\n        // copy array from state to updatedTodosArr\n        const updatedTodosArr = [...this.state.todos];\n        // add new todo Item to updatedTodosArr on first position\n        updatedTodosArr.unshift(newTodo);\n\n        //update state with updatedTodosArr\n        this.setState({\n            todos: updatedTodosArr\n        });\n        console.log(updatedTodosArr);\n    }\n    \n\n    render() {\n\n        console.log('Komponente render wird aufgerufen')\n        return (\n            <div className=\"container\">\n                <Header />\n                <InputTodo \n                    addTodoItem ={this.addTodoItem}\n                />\n                <ul>\n                    {\n                        this.state.todos.map(todo => (\n                            <TodoItem\n                                key={todo._id}\n                                id={todo._id}\n                                title={todo.title}\n                                completed={todo.completed}\n                                handleChange={this.onChangeCheckbox} \n                                deleteTodoHandler={this.deleteTodoHandler}\n                            />\n                        ))\n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\n// functional component\nconst TodoContainerFunction = (props) => {\n\n    return (\n        <div>\n            <h1>Hi, ich bin der TodoContainer!</h1>\n            <p>{props.text}</p>\n        </div>);\n};\nvoid TodoContainerFunction; // Tue nichts -> vermeidet warning\n\nexport default TodoContainer;\n","import React from 'react';\nimport TodoContainer from './components/TodoContainer';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoContainer text=\"Mein Text kommt als property\"/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}